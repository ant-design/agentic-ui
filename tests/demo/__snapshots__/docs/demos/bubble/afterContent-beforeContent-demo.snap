<DocumentFragment>
  <div
    class="ant-app"
  >
    <div>
      test
    </div>
    <div
      style="border-radius: var(--radius-modal-base); background: var(color-gray-bg-page-light); box-shadow: var(--shadow-control-base); width: min(830px,100%); display: flex; flex-direction: column; justify-content: space-between; padding: 0px; z-index: 0; margin: 24px auto;"
    >
      <div
        style="padding: 16px; display: flex; flex-direction: row; align-items: center; box-sizing: border-box; border-width: 0px 0px 1px 0px; border-style: solid; border-color: rgba(0, 16, 32, 0.063);"
      >
        <span
          style="font-size: 13px; color: rgba(0, 0, 0, 0.45);"
        >
          📝 afterContent 和 beforeContent 渲染演示
        </span>
        <div
          style="font-size: 12px; color: rgba(0, 0, 0, 0.45);"
        >
          这个演示展示了如何使用 afterContentRender 和 beforeContentRender 在消息内容的前后添加自定义内容
        </div>
      </div>
      <div>
        <div
          style="padding: 24px;"
        >
          <div
            bubblerenderconfig="[object Object]"
            data-testid="bubble"
            origindata="[object Object]"
          >
            bubble
          </div>
        </div>
        <div
          style="padding: 16px; background: rgb(230, 247, 255); border-radius: 8px; font-size: 14px;"
        >
          <strong>
            📖 功能说明：
          </strong>
          <ul
            style="margin: 8px 0px 0px 0px; padding-left: 20px;"
          >
            <li>
              <strong>
                beforeContentRender:
              </strong>
               在消息内容前面添加自定义内容
            </li>
            <li>
              <strong>
                afterContentRender:
              </strong>
               在消息内容后面添加自定义内容
            </li>
            <li>
              <strong>
                参数:
              </strong>
               两个函数都接收 props 和 defaultDom 参数
            </li>
            <li>
              <strong>
                返回值:
              </strong>
               可以返回任何有效的 React 节点
            </li>
            <li>
              <strong>
                禁用:
              </strong>
               设置为 false 可以禁用对应的渲染
            </li>
          </ul>
        </div>
      </div>
      <div
        style="margin-top: 24px; padding: 16px; background: rgb(245, 245, 245); border-radius: 8px; font-size: 12px;"
      >
        <strong>
          💻 代码示例：
        </strong>
        <pre
          style="margin: 8px 0px 0px 0px; overflow: auto;"
        >
          // 自定义 beforeContent 渲染函数
const customBeforeContentRender = (props) =&gt; {
  const messageData = props.originData;
  return (
    &lt;div style={{
      padding: '8px 12px',
      background: '#f5f5f5',
      borderRadius: '6px',
      marginBottom: '8px',
      fontSize: '12px',
      color: '#666'
    }}&gt;
      📝 消息创建时间: 2023-12-21 10:30:56
    &lt;/div&gt;
  );
};

// 自定义 afterContent 渲染函数
const customAfterContentRender = (props) =&gt; {
  const messageData = props.originData;
  return (
    &lt;div style={{
      padding: '8px 12px',
      background: '#e6f7ff',
      borderRadius: '6px',
      marginTop: '8px',
      fontSize: '12px',
      color: '#1890ff'
    }}&gt;
      ✅ 消息状态: 已完成
    &lt;/div&gt;
  );
};

// 使用配置
&lt;Bubble
  originData={messageData}
  bubbleRenderConfig={{
    beforeContentRender: customBeforeContentRender,
    afterContentRender: customAfterContentRender,
  }}
/&gt;
        </pre>
      </div>
    </div>
  </div>
</DocumentFragment>