<DocumentFragment>
  <div
    class="ant-app"
  >
    <div>
      test
    </div>
    <div
      style="padding: 20px; display: flex; flex-direction: column; gap: 20px;"
    >
      <h2>
        Quote 组件演示
      </h2>
      <div>
        <h3>
          基础用法
        </h3>
        <div
          data-testid="quote"
          filename="utils/helper.ts"
          linerange="12-25"
          popupdetail="export const formatData = (data: any) => {
  if (!data) return null;
  return {
    id: data.id,
    name: data.name,
    createdAt: new Date(data.created_at)
  };
};"
          quotedescription="这是一个工具函数的引用，用于处理数据格式化"
        >
          quote
        </div>
      </div>
      <div>
        <h3>
          可关闭的引用
        </h3>
        <div
          data-testid="quote"
          filename="components/Button.tsx"
          linerange="45-60"
          quotedescription="Button组件的点击事件处理逻辑"
        >
          quote
        </div>
      </div>
      <div>
        <h3>
          不传文件名
        </h3>
        <div
          data-testid="quote"
          popupdetail="这里是详细的说明文本，可以包含多行内容。
当内容过多时，会出现滚动条。
用户可以通过滚动查看完整内容。"
          quotedescription="这是一个没有文件来源的引用内容"
        >
          quote
        </div>
      </div>
      <div>
        <h3>
          纯内容引用
        </h3>
        <div
          data-testid="quote"
          filename="README.md"
          quotedescription="项目使用说明和API文档"
        >
          quote
        </div>
      </div>
      <div>
        <h3>
          长文件名测试
        </h3>
        <div
          data-testid="quote"
          filename="src/components/ComplexComponent/SubComponent/VeryLongFileName.tsxsrc/components/ComplexComponent/SubComponent/VeryLongFileName.tsx"
          linerange="100-150"
          popupdetail="interface VeryLongInterfaceName {
  propertyWithVeryLongName: string;
  anotherPropertyWithEvenLongerName: number;
  yetAnotherPropertyThatIsEvenLonger: boolean;
}"
          quotedescription="这是一个很长的文件路径，用来测试文件名的省略效果"
        >
          quote
        </div>
      </div>
      <div>
        <h3>
          弹出方向示例
        </h3>
        <div
          style="display: flex; gap: 20px; flex-wrap: wrap;"
        >
          <div
            style="flex: 1 1 0%; min-width: 300px;"
          >
            <h4>
              左侧弹出（默认）
            </h4>
            <div
              data-testid="quote"
              filename="src/utils/leftAlign.ts"
              linerange="1-20"
              popupdetail="export const leftAlign = (text: string, width: number) => {
  return text.padEnd(width, ' ');
};

// 使用示例
const aligned = leftAlign('Hello', 10);
// 'Hello     '"
              popupdirection="left"
              quotedescription="左侧对齐的工具函数"
            >
              quote
            </div>
          </div>
          <div
            style="flex: 1 1 0%; min-width: 300px;"
          >
            <h4>
              右侧弹出
            </h4>
            <div
              data-testid="quote"
              filename="src/utils/rightAlign.ts"
              linerange="1-20"
              popupdetail="export const rightAlign = (text: string, width: number) => {
  return text.padStart(width, ' ');
};

// 使用示例
const aligned = rightAlign('Hello', 10);
// '     Hello'"
              popupdirection="right"
              quotedescription="右侧对齐的工具函数"
            >
              quote
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</DocumentFragment>