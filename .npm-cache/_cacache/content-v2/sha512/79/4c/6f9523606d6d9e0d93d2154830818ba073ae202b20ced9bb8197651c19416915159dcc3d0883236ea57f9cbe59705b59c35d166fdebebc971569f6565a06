{"_id":"sast","_rev":"18-fa9f6be20c21211cdae351363c5e5a7e","name":"sast","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","dist-tags":{"latest":"0.8.1","next":"0.8.0-rc.3a67128","canary":"0.0.0-e9403ac"},"versions":{"0.0.1":{"name":"sast","version":"0.0.1","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"MIT","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"f2ee45adf6ffd12019cc7acc932c6597790bd0e7","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.0.1","_shasum":"7b6bcd0dfa3d57a92761c9a6daadbfdd403584fe","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"7b6bcd0dfa3d57a92761c9a6daadbfdd403584fe","tarball":"https://registry.npmjs.org/sast/-/sast-0.0.1.tgz","integrity":"sha512-mD7k3QmtSEjArnSyCiwflIp0+EkpWf8ITISxjFiw1QL77BamdQy17V8yrg6EWHKo2JC89otKimlZEBNiLRTLkg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCZTQQL8xOpbG18pNIfM0WSN5ibMwjjWoBkOFZshbgm7wIgXk+X1JysJuGEnap4S3svVQNrSm3KyrU72utLjv1WOdY="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast-0.0.1.tgz_1508351915286_0.9950855919159949"},"directories":{}},"0.1.0":{"name":"sast","version":"0.1.0","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"MIT","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"7e2773a5f8e2a393d798f00a82eba221cce8e301","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.1.0","_shasum":"695ea42ec39dfa928e0078bf0a3ee139bc049ad1","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"695ea42ec39dfa928e0078bf0a3ee139bc049ad1","tarball":"https://registry.npmjs.org/sast/-/sast-0.1.0.tgz","integrity":"sha512-mjB9HPpYOTv4fZgErqK6D2TDO0aOFDhfx/aAaz3NemJDK0RVBIe0yI7OsVa82bKLMbTtd+gefGGyynB9RT5ApQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICDwuuq9PGuMx++3Dv4/u0JHdzbiv61ONll9FThwT8vHAiEA0AWGcDmCWfQ/1CicC0yeIUO+RqBTGusnE4kTzy8cpr4="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast-0.1.0.tgz_1508357996476_0.9541536942124367"},"directories":{}},"0.1.1":{"name":"sast","version":"0.1.1","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"MIT","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"c145e7ddb7d45f01f52b4c9764489e3cac2987ff","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.1.1","_shasum":"d4fc565898ddd4ae681607fd95a3a94cf59fe4a8","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"d4fc565898ddd4ae681607fd95a3a94cf59fe4a8","tarball":"https://registry.npmjs.org/sast/-/sast-0.1.1.tgz","integrity":"sha512-Neeke+Xho6MTHjTZW9jx0mxAdHsBDQU5DqL1nsVqTfcPCrQRR6SHAU7DzM7b80rv6ZDU0W/x+uF1/PSevDTjDg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCTg0rilqSaG04fkpkqGFokxzddWWGqiHrVVxKd5FmT7wIhAO81a8mcVtt39XB21PbgzroNtIb5Z1s08nmzxcJ/7REV"}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast-0.1.1.tgz_1508358422616_0.2539365072734654"},"directories":{}},"0.1.2":{"name":"sast","version":"0.1.2","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"09bc07403efd6b988091bda17979e06d9dabc600","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.1.2","_shasum":"45faffa97fda07741f06a5327df686980fb30a97","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"45faffa97fda07741f06a5327df686980fb30a97","tarball":"https://registry.npmjs.org/sast/-/sast-0.1.2.tgz","integrity":"sha512-5YILNq+c6HTCsekqy8jV0fT+Csmho21kWVE7v7g+aliIBYSJLrpce57X1kzIUIIwFfZITObWePLX7OjgUTckpA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBifcYJgbZfy9dPJeJe0wH3Jg9PIQHpDJ5kYqOEHyrvAAiEA4kjhDzCya+u4opwx2StStyvJyxZywtFin8GAAu1LfOc="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast-0.1.2.tgz_1508358535120_0.4517182840500027"},"directories":{}},"0.2.0":{"name":"sast","version":"0.2.0","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"1f2b4f37ca013a49af03d0f7a58fee1abc859914","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.2.0","_shasum":"a7d1736daa5e93699f8b4d9c18f77794c68845a1","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"a7d1736daa5e93699f8b4d9c18f77794c68845a1","tarball":"https://registry.npmjs.org/sast/-/sast-0.2.0.tgz","integrity":"sha512-uwhuK9QLhhHXFgm2hcEXNmpznKcM4ELYyVp+YechdmRnV7Hii7tR7XPAy/mGX+FYEINaRAYdsEdpnSk/xr0CLw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICOGSTvyB1ZHGC/73UdaDAHJPXLVfZylVwsQqb9Be1JoAiAJFo1PNujowL5uii6fjlVrGxjNUT2bronOQlcU8Uokaw=="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast-0.2.0.tgz_1508402372295_0.3528391981963068"},"directories":{}},"0.3.0":{"name":"sast","version":"0.3.0","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"adde4cba7c0f109885f43b56caeef9346b3b57a4","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.3.0","_shasum":"4a7fe7d20b64554c2c8032fc3672056ba1294c3d","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"4a7fe7d20b64554c2c8032fc3672056ba1294c3d","tarball":"https://registry.npmjs.org/sast/-/sast-0.3.0.tgz","integrity":"sha512-662COkMI3fr/0fQbSvRUQq4QhS5n2QHdPDbklVy2lm282i5j88XTVnTpSMi5uWiSQJsHp5oKJztV4g899QeWrw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBFUV0tF04eNGDPUK/ecdRZRta/mH8MsEgpDuqLA+hSMAiA9H+dT5vDO6H0JeeoQkTDRLk6dsCheASRqQPCsP8ir0Q=="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast-0.3.0.tgz_1508433652014_0.14605407090857625"},"directories":{}},"0.4.0":{"name":"sast","version":"0.4.0","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"fd1efb512c564ff7c199a16cbc4bf908579d0773","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.4.0","_shasum":"562e2ee6ecddabf50bfe4f0fda893a217513cc59","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"562e2ee6ecddabf50bfe4f0fda893a217513cc59","tarball":"https://registry.npmjs.org/sast/-/sast-0.4.0.tgz","integrity":"sha512-BMFP6K4PUsj1D2UcwUo8at92px1d89COGKNUTn7a+W5CWiL775kcvSSqi2CZEKxQ3Jz4HdZUnNEPlsfu6/c9fQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCUWYQ8NhSCJhHeKobEHHsRWCgpevUdbI5wVfMtFHFn+wIhAMglwq52exTm1ojMQS9gnPQjwTaCUN2OchBOiYfJEvw+"}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast-0.4.0.tgz_1508447048461_0.37769732996821404"},"directories":{}},"0.5.0":{"name":"sast","version":"0.5.0","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"e7be927c9a8e37dd47202330bc9f49f423d19810","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.5.0","_shasum":"d50d813c351a9e805e904eff4acd69e5fc3b159a","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"d50d813c351a9e805e904eff4acd69e5fc3b159a","tarball":"https://registry.npmjs.org/sast/-/sast-0.5.0.tgz","integrity":"sha512-Zoa7q+/7Is69/QWW8DSZwglYsd2lw3FVcYpbh4l3RQE5nRd9k1rgCh+QGDArOdvj6Rrczg2T63M0Z4sECaPCyw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCOTOgSKuxB2OgNiP1ihBQ3t9ok/wtOoMtDnsdC3y8m8wIgFm7Xt1QCsbXF3EafbQP+yx/rYp7fF3yRlIuzFEs4GlU="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast-0.5.0.tgz_1508447594908_0.2481048780027777"},"directories":{}},"0.6.0":{"name":"sast","version":"0.6.0","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"10270f4868dfc51a1ad543b587577e27042127b3","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.6.0","_shasum":"7899d91735ee967e1834a3fb86743a07febc8ff7","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"7899d91735ee967e1834a3fb86743a07febc8ff7","tarball":"https://registry.npmjs.org/sast/-/sast-0.6.0.tgz","fileCount":22,"unpackedSize":224119,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+0fDCRA9TVsSAnZWagAAeDUP/AqEjyAQ1+f3YBmxAxb9\nI+qDw9zCnkfWkPi5Hcso5lVoJDZgRnCuD31xvYdoohb/Y7jufL5kpjfu2M61\n5N2oPicgpPmhGWdgVlyQ83h1CQXM/wtm4IG3sIWo7sVKkNDKmSuv7zGNhXPQ\nwQev0vckikZRxdB/ES2hthzxaacqawM5FnNvykUrqKiM1joeBOQoTN0gYIyD\ndOc/hSZdCQPpZRIajBVkRtgD0MD/J8Sp1VyZh9XW8W7sG74H4zTd9A9ELNeU\nKpdn+egwYgSgZzYv1VPk85u8usNFdvdk2Qu8W726B96slln8GO+eLELHDE/2\nKSrJgiao1KIOBry16uUWQ9OwUlWenLFeqJC5TkaZj/FZnvxlqSWVEh9/CBq6\nzHMOFSrolz9Hn5Gko4R/SOLKvDLsYIKa4qKsi5WyGJY+ZTcKVxRkPQFGOOlO\nO4Pj4Ms/yNy0Yf8CliTI0N/x2QLlmsgPrzO5w/TRuSuLmF2PNkEhZHUQCLix\n9S0BmSwYEqmufbsdEDUJGCbT5rKjRK+wOBendlmYpb7rlFfSZagv0IprTaqq\n0Y6BvilDiqBjQaLaeXuVRFZgn+nfhKGXDpO9Ar1CBR9kcStP8xKiVUj9nOBK\nE3Fxd7raCAhnj+Sjz0fqdog6sOUQBVp7foq830mdFkjNkycgcjsK1TVBPEri\nTx0o\r\n=v4dl\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-92R9/pp8dWi+I2ELeQ0PISrnpOyXArxGpJLsEn3nzQLNGCMfbR+BqXjtFxfBWWSTLsUyeELUHfBkwdhzHGlo2g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDaW2AycBY2qbgifw0dO3coGDvg7ZGqlWdywwYVRPj3dAIhAISnxLwlO/U9rbuPA71qyj9EhRYwAYO0z8WVdJ/sWsxN"}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast_0.6.0_1526417346302_0.26060780875700273"},"_hasShrinkwrap":false},"0.7.0":{"name":"sast","version":"0.7.0","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"df554a29f2b513fada63d8d53c969a1651a66e17","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.7.0","_shasum":"ca660349ee1ade000d1355c6873826010b1a6dd0","_from":".","_npmVersion":"4.6.1","_nodeVersion":"7.10.1","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"shasum":"ca660349ee1ade000d1355c6873826010b1a6dd0","tarball":"https://registry.npmjs.org/sast/-/sast-0.7.0.tgz","fileCount":22,"unpackedSize":224312,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+1RUCRA9TVsSAnZWagAADH0QAJQsWKT6TGRcQ6bRtJvK\nDwdpmVgquVwNTXTMvO5tqZzWiVrk2hSVhLvPc1xeq1yn6NuLS3Wnl6aDRSkT\n0DcVONGkHVqNOW3cdtCFpDx7EHDxW3zNzNnhGkfKzfx1IAv22s4+APXJ54s3\nOzM5G71pr9Guwa/dRum5DFWPbUQrVDDkbIGstiEb60O4P2p9x/MarLmGAwG5\nNlldpsEEE6IbrhPAzqSb23qikj+skNPt6noorOkSOX1AzgDJki0skixWe3D1\nM3rzb8uTlCNrRLCpf+payi/TAraO3MJMj2zKidWAYYxihq2LQwl1hSNYFPtG\nkNY73gqWAeUPcyv2B9WbNVBAPXDusBwybMxO4Gumna+X6tBNsI5RjnGlXadF\nJBjDAZsKGVlyb5JL3QZdxzUN0Lx7hdmchMob4ypPNO60qosOEmtgrzrbJlHO\n9t2PYielk72HkYIKlDOpWIaj/EDxmi/S1SsALROWSiKGHkHBSZhSjE7+UAk+\nBqLksio2EXjvCueUfX7aVfMe98fUBlovKZJodyEmgLyfDuv1FoQjg2t1kLZB\nnNaoLT8/qCSvA3oUwErzV+n8kedygYsHsBwnbuAJdgS+mndX5NsqGBuWLeo4\nWmezUOcKRytmhrXLlJ4Ns+R+44rAtg9jxxiTndXevwQizgYgMFK5tuUWkLeY\nAJ+X\r\n=xtJp\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-UqAxPEeoT48EN5+O0I4myyInn4/oxZ2MMdLv+2Q4B/DhZs0l8+VMwVoE3KMB0UMwuPdwC39wkGDZYCEW3ari0Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCqHOi2WyjSe15D9YvcQZcctBRLUCiwMpU9H4lknWwiVwIgN1s6fLnCsM4Kq0M7rq/6Xy9wnNMo+vpHfwsBNwTAvxI="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast_0.7.0_1526420562702_0.6164851031291418"},"_hasShrinkwrap":false},"0.8.0-rc.69c1208":{"name":"sast","version":"0.8.0-rc.69c1208","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"readme":"# sast\nThis is a thing that parses CSS, Sass, and SCSS into a [unist]-compatible\nabstract syntax tree (AST), which makes it possible to then search and\nmanipulate with all of the wonderful [unist utility modules][utilities]. Most\nof the heavy lifting is done by [gonzales].\n\n## Installation\nInstall it with npm:\n\n```\nnpm install --save sast\n```\n\n## Usage\nYou can `import` or `require()` the module and access [the API](#api) as its\nmethods, like this:\n\n```js\n// CommonJS, older versions of Node\nconst sast = require('sast')\n\n// ES6/ES2016/Babel/etc.\nimport sast from 'sast'\n\nconst tree = sast.parse('a { color: $red; }', {syntax: 'scss'})\nconsole.dir(tree, {depth: null})\n```\n\nor you can import just the API methods you need, like so:\n\n```js\n// CommonJS\nconst {parse} = require('sast')\n// ES6\nimport {parse} from 'sast'\n\nconst tree = parse('a { color: $red; }', {syntax: 'scss'})\n```\n\n## API\n\n### `sast.parse(source [, options])` <a name=\"parse\"></a>\nSynchronously parse the CSS, Sass, or SCSS source text (a string) into an\nabstract source tree (AST). The default syntax is CSS (`{syntax: 'css'}`);\nother acceptable values are `sass`, `scss`, and `less`. See the [gonzales\ndocs](https://github.com/tonyganch/gonzales-pe#parameters-1) for more info. To\nparse files by path, use [`parseFile()`](#parse-file).\n\n### `sast.stringify(node)` <a name=\"stringify\"></a>\nFormat the resulting AST back into a string, presumably after manipulating it.\n\n### `sast.jsonify(node)` <a name=\"jsonify\"></a>\nCoerce the given AST node into JSON data, according to the following rules:\n\n1. Numbers are numbers: `1` -> `1`, not `\"1\"`.\n1. Lists become arrays: `(a, 1)` -> `[\"a\", 1]`\n1. [Maps][Sass maps] become objects: `(x: 1)` -> `{x: 1}`\n1. Lists and maps can be nested!\n1. Everything else is [stringified](#stringify), and _should_ be preserved in\n   its original form:\n   * Sass/SCSS variables should preserve their leading `$`.\n   * Hex colors should preserve their leading `#`.\n   * `rgb()`, `rgba()`, `hsl()`, `hsla()`, and any other functions should\n     preserve their parentheses.\n   * Parentheses that are not parsed as lists or maps should be preserved.\n\n### `sast.parseFile(filename [, parseOptions={} [, readOptions='utf8'])` <a name=\"parse-file\"></a>\nRead a file and parse its contents, returning a Promise. If no\n`parseOptions.syntax` is provided, or its value is `auto`, the filename's\nextension will be used as the `syntax` option passed to [`parse()`](#parse).\n\n```js\nconst {parseFile} = require('sast')\nparseFile('path/to/some.scss')\n  .then(tree => console.dir(tree, {depth: null}))\n  .catch(error => console.error('Parse error:', error))\n```\n\n## CLI\nThe `sast` [npm package] comes with two command line utilities:\n\n### `sast-parse`\nParses a file or stdin as a given syntax, applies one or more simplifying\ntransformations, then outputs the resulting syntax tree in a variety of\nformats:\n\n* JSON: the raw syntax tree in object form, which can be passed to other CLIs.\n* [YAML]: an easier-to-read alternative to JSON, also suitable for piping to\n  other CLIs.\n* Tree: a text representation of the syntax tree provided by\n  [unist-util-inspect](https://github.com/syntax-tree/unist-util-inspect).\n* Text: the [stringified](#stringify) syntax tree, which is hopefully valid for\n  the given syntax.\n\nRun `sast-parse --help` for available options.\n\n### `sast-data`\nParses one or more SCSS (the only supported syntax at this time) files, and\ntransforms all top-level variable declarations into key-value pairs. The result\nis a JSON object in which each key is a variable name, and the value is the\n[jsonified](#jsonify) variable value.\n\nThis is useful for generating [design tokens] from existing SCSS variables if\nyou don't have the ability to go in the other direction.\n\nRun `sast-data --help` for available options and more information.\n\n## Node types\nMost [node types] are defined by [gonzalez], the underlying parser. After\ntransforming each of the syntax tree nodes into [unist nodes], the following\nnodes are introduced:\n\n### Maps\nAny `parentheses` node whose first `operator` child is a `:` is interpreted as\na [Sass map] and recast as a `map` node. The `children` are preserved as-is,\nand key/value pairs separated by `:` and delimited by `,` are placed in the\n`values` property as an array of objects with `key` and `value` properties,\neach of which is a plain old node list. Some examples:\n\n* `(x: 1)` will be [jsonified](#jsonify) as `{x: 1}`\n* `(x: a, y: 2)` will be interpreted as `{x: \"a\", y: 2}`\n\n### Lists\nAny `parentheses` node whose first `operator` child is a `,` is interpreted as\na list (array) and recast as a `list` node. The `children` are perserved as-is,\nand children that aren't `space` nodes are split into subgroups by each `,`\noperator and converted into `value` nodes with one or more children, then\nplaced in the `values` property of the `list` node. Some examples:\n\n* `(1, x)` will be [jsonified](#jsonify) as `[1, \"x\"]`\n* `(a, (b, c))` will be intepreted as `[\"a\", [\"b\", \"c\"]]`\n\n\n[gonzales]: https://github.com/tonyganch/gonzales-pe\n[node types]: https://github.com/tonyganch/gonzales-pe/blob/dev/docs/node-types.md\n[sass map]: https://www.sitepoint.com/using-sass-maps/\n[unist]: https://github.com/syntax-tree/unist\n[unist nodes]: https://github.com/syntax-tree/unist#unist-nodes\n[utilities]: https://github.com/syntax-tree/unist#list-of-utilities\n[npm package]: https://npmjs.com/package/sast\n[YAML]: https://en.wikipedia.org/wiki/YAML\n","readmeFilename":"README.md","gitHead":"0c97c648a3f5e8b148b5e973283fc32e1635a2df","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.8.0-rc.69c1208","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"integrity":"sha512-lUotWbgQrSZq3nf47gIwzXOCXvBS+ecYCnYUh/FWjYFUxWroWgapBnP8Ck9INHNgN0t7cefAEf7aebah4sy/DQ==","shasum":"65a02d83b8e9348c051eca634011b55cda57166d","tarball":"https://registry.npmjs.org/sast/-/sast-0.8.0-rc.69c1208.tgz","fileCount":21,"unpackedSize":28488,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc2yKSCRA9TVsSAnZWagAAnoIQAIfSQi+inWO7ojdpbfUz\nahBY1sDNv47dcXPh28/cEDO5LdCrwkkS01e4AjJzt8E0ruuhfmh5/7FaqenJ\nX2FwpiZGMEemEpjXqKIJRxjN8m5taCkO0CyNOLfnNZOAxMJQ7TEowXA3NDps\nopiJUraCe15yC7HlwTDCelY0nfWW+wsO0H9UEo4wI/RIq/PyBBr6VTKWEMZA\n2bhKWy/ZWTX18SJfpiLO3U1gp/KvJI7xToiyTsaMn4D0YSZATwcbAHY+TDgv\nLdtBOluFahPA0qwW0es75JXnIeJUelDBe04EK5fJ8aHJSHrrtje58AWACu1R\nlid1Fcbqbo4EvH1mUeaoySuIiRRx3teUCCuoE8S3NmcvCxvsj9PkurqpjZhr\nWYHxbxZPTONGVY16TkBT5MT553YSA3bSwt/8FZO0NJnxw8obmKJFfQIHkySb\nCu10E9o8Y91eWdJrIt2ur7CCsaylf3HXJX148zxORxvuDGVBj4VAiADHwSSU\ngNpgg2GhoLBqVaC7yXRDxNKfnWAsTtGxnYlV5iV/+Q/YrMtt8ills2gHyWGh\n+UHnTX2UfOTjdeiQYSUAb/RcvHNh2JxP9sFWTMcmtkvBqrggTpjn7bv4TdHf\nvsS4XCdnQTQrLWoq04bqyTvfbSu3gN6VsejZhHLjgDayI29pU1RRhYjQfSxF\nNPWy\r\n=fseN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCAfd8g0k54/BIq+X+QacZks3b9XL5AZfmCyMOCWcEeGQIhAK3Wp4TFwFpL+0rIlmzYwZMCc6uFhMo3M1XCKO3V76Hc"}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast_0.8.0-rc.69c1208_1557865105567_0.35182314308330964"},"_hasShrinkwrap":false},"0.8.0-rc.3a67128":{"name":"sast","version":"0.8.0-rc.3a67128","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"readme":"# sast\nThis is a thing that parses CSS, Sass, and SCSS into a [unist]-compatible\nabstract syntax tree (AST), which makes it possible to then search and\nmanipulate with all of the wonderful [unist utility modules][utilities]. Most\nof the heavy lifting is done by [gonzales].\n\n## Installation\nInstall it with npm:\n\n```\nnpm install --save sast\n```\n\n## Usage\nYou can `import` or `require()` the module and access [the API](#api) as its\nmethods, like this:\n\n```js\n// CommonJS, older versions of Node\nconst sast = require('sast')\n\n// ES6/ES2016/Babel/etc.\nimport sast from 'sast'\n\nconst tree = sast.parse('a { color: $red; }', {syntax: 'scss'})\nconsole.dir(tree, {depth: null})\n```\n\nor you can import just the API methods you need, like so:\n\n```js\n// CommonJS\nconst {parse} = require('sast')\n// ES6\nimport {parse} from 'sast'\n\nconst tree = parse('a { color: $red; }', {syntax: 'scss'})\n```\n\n## API\n\n### `sast.parse(source [, options])` <a name=\"parse\"></a>\nSynchronously parse the CSS, Sass, or SCSS source text (a string) into an\nabstract source tree (AST). The default syntax is CSS (`{syntax: 'css'}`);\nother acceptable values are `sass`, `scss`, and `less`. See the [gonzales\ndocs](https://github.com/tonyganch/gonzales-pe#parameters-1) for more info. To\nparse files by path, use [`parseFile()`](#parse-file).\n\n### `sast.stringify(node)` <a name=\"stringify\"></a>\nFormat the resulting AST back into a string, presumably after manipulating it.\n\n### `sast.jsonify(node)` <a name=\"jsonify\"></a>\nCoerce the given AST node into JSON data, according to the following rules:\n\n1. Numbers are numbers: `1` -> `1`, not `\"1\"`.\n1. Lists become arrays: `(a, 1)` -> `[\"a\", 1]`\n1. [Maps][Sass maps] become objects: `(x: 1)` -> `{x: 1}`\n1. Lists and maps can be nested!\n1. Everything else is [stringified](#stringify), and _should_ be preserved in\n   its original form:\n   * Sass/SCSS variables should preserve their leading `$`.\n   * Hex colors should preserve their leading `#`.\n   * `rgb()`, `rgba()`, `hsl()`, `hsla()`, and any other functions should\n     preserve their parentheses.\n   * Parentheses that are not parsed as lists or maps should be preserved.\n\n### `sast.parseFile(filename [, parseOptions={} [, readOptions='utf8'])` <a name=\"parse-file\"></a>\nRead a file and parse its contents, returning a Promise. If no\n`parseOptions.syntax` is provided, or its value is `auto`, the filename's\nextension will be used as the `syntax` option passed to [`parse()`](#parse).\n\n```js\nconst {parseFile} = require('sast')\nparseFile('path/to/some.scss')\n  .then(tree => console.dir(tree, {depth: null}))\n  .catch(error => console.error('Parse error:', error))\n```\n\n## CLI\nThe `sast` [npm package] comes with two command line utilities:\n\n### `sast-parse`\nParses a file or stdin as a given syntax, applies one or more simplifying\ntransformations, then outputs the resulting syntax tree in a variety of\nformats:\n\n* JSON: the raw syntax tree in object form, which can be passed to other CLIs.\n* [YAML]: an easier-to-read alternative to JSON, also suitable for piping to\n  other CLIs.\n* Tree: a text representation of the syntax tree provided by\n  [unist-util-inspect](https://github.com/syntax-tree/unist-util-inspect).\n* Text: the [stringified](#stringify) syntax tree, which is hopefully valid for\n  the given syntax.\n\nRun `sast-parse --help` for available options.\n\n### `sast-data`\nParses one or more SCSS (the only supported syntax at this time) files, and\ntransforms all top-level variable declarations into key-value pairs. The result\nis a JSON object in which each key is a variable name, and the value is the\n[jsonified](#jsonify) variable value.\n\nThis is useful for generating [design tokens] from existing SCSS variables if\nyou don't have the ability to go in the other direction.\n\nRun `sast-data --help` for available options and more information.\n\n## Node types\nMost [node types] are defined by [gonzalez], the underlying parser. After\ntransforming each of the syntax tree nodes into [unist nodes], the following\nnodes are introduced:\n\n### Maps\nAny `parentheses` node whose first `operator` child is a `:` is interpreted as\na [Sass map] and recast as a `map` node. The `children` are preserved as-is,\nand key/value pairs separated by `:` and delimited by `,` are placed in the\n`values` property as an array of objects with `key` and `value` properties,\neach of which is a plain old node list. Some examples:\n\n* `(x: 1)` will be [jsonified](#jsonify) as `{x: 1}`\n* `(x: a, y: 2)` will be interpreted as `{x: \"a\", y: 2}`\n\n### Lists\nAny `parentheses` node whose first `operator` child is a `,` is interpreted as\na list (array) and recast as a `list` node. The `children` are perserved as-is,\nand children that aren't `space` nodes are split into subgroups by each `,`\noperator and converted into `value` nodes with one or more children, then\nplaced in the `values` property of the `list` node. Some examples:\n\n* `(1, x)` will be [jsonified](#jsonify) as `[1, \"x\"]`\n* `(a, (b, c))` will be intepreted as `[\"a\", [\"b\", \"c\"]]`\n\n\n[gonzales]: https://github.com/tonyganch/gonzales-pe\n[node types]: https://github.com/tonyganch/gonzales-pe/blob/dev/docs/node-types.md\n[sass map]: https://www.sitepoint.com/using-sass-maps/\n[unist]: https://github.com/syntax-tree/unist\n[unist nodes]: https://github.com/syntax-tree/unist#unist-nodes\n[utilities]: https://github.com/syntax-tree/unist#list-of-utilities\n[npm package]: https://npmjs.com/package/sast\n[YAML]: https://en.wikipedia.org/wiki/YAML\n","readmeFilename":"README.md","gitHead":"4340b9c5cb61587b6d81e2a085ea2661fb621d88","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.8.0-rc.3a67128","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"integrity":"sha512-Hto5EqMGTCWIrKRws/wLfGGrqa1/jJnKifxWtFwlZIJu2X6FICXIJ1mlTU9loqREhdr+tzXYzw/60eDXTEKUXQ==","shasum":"a63f1f90f267064e94c18dfca056395f4eb8444f","tarball":"https://registry.npmjs.org/sast/-/sast-0.8.0-rc.3a67128.tgz","fileCount":21,"unpackedSize":28485,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc2yLBCRA9TVsSAnZWagAAenEP/0OMtgdNyMY5gnWY1U1A\nXCpLElyQQVFXYMrfwxWcB1CWv8qbuRjGRa7wV/WQ48sLIqKqA5mwUAT2rZ1f\nnwowGvNRn7UaLtfMIdfJuip+cK2Cn2R3oRgaUnMkK2zRHiD5ZyAPLM/nVFHC\nFXY+rVRbqjJArTRTnCi5bOAZT+fqjk1dV1JBmqinpbUAIH06tHgz0QPKfmBV\nBHVMLWXmFElSmjEpKwnMJfu/ZTlc4fnur+DubNXwIJYNfwNf1BVhzDpQXV9B\ncVp4StkDFYSskjG6n8BXW4O2rQWWE9L/kAf5Ai/41MS7O9lGhMHyRCFYTIRz\nedcCQwhOFTabrd3qE1TAU2YRlMNOt1TUtGSJ7sNU1P1MnnYD23HGnbb6BlxT\nVZADiaMxIxFm3DDSCDTTGMBTyLNCqHdcS6mddFsfmmLifP0liOsLe9d4lEDU\nA0wzhMP3uPG73UZXPd4xFh9xgxpTFGNt1+VXNfp4aeO6x68USj2s86VqNu/r\nD5D2KgVLdtoqQT9TK6xlORN74OHokCCSpF448udUR3NavtmJPYPASX5daJwW\n4lcsvtujaBYW3tPIDZrcVdlygyY9xhb9WCuvro7nQXpCvJx1t73trgdpKuGT\nbojw1OGR1EkwGxSW6KQqFi+VbXSAZNMk/cfQ45u7nJ8RqaI6eyAP1gNWnKHW\nwt+3\r\n=DhFZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDbHwiEj5yjGEOgR30alfR/gCeQPUL2kP7V9uMUCn64owIhAIDaw1qD5QN8yjW6vsdsyMZq/EI85Z1MFx1c7NqVQB2V"}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast_0.8.0-rc.3a67128_1557865152665_0.5352673078768164"},"_hasShrinkwrap":false},"0.8.0":{"name":"sast","version":"0.8.0","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.10.0","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^0.22.0"},"gitHead":"47bec85c50a0eba2cd78b1d3655f577ebd8fb394","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.8.0","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"integrity":"sha512-WfrWhIuPl2/DNd9mE8nErXqhHcLZ4FrCaoMIE34qSZZI9QqOkmIHKzXkaHCEHqIxOM7TZlPCdtjrk/eh6BgstA==","shasum":"478aa1024e5b30a890a35a7667f99cbce26646a0","tarball":"https://registry.npmjs.org/sast/-/sast-0.8.0.tgz","fileCount":21,"unpackedSize":28474,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc2yptCRA9TVsSAnZWagAAfh4P/2Roc/q83wH97SMxPQFc\nm7iIl8l6eENzbJoU2uu29t1ff3bq9H/efCoWyc1BT7u3rBI0VKMny4nRQGxo\nUG35cgEtKpW9snqSVpbRSemq4fYm85FK4yZ0UZeVqxfx/xlwwTaToSPxxS3i\nUN3OsfGvVpwYJDEnRyRXV6D83Pmad7CkzQj2I4EDF6+zDWpgra7XV0QKO7su\nELj8rnEeR5DQ+8CDR25/jYwU2vNzR9qLlg+YroIlMnn/R/G9TpnWSLiZ+3jR\nUFLAVgApXps1ZrvNDRCltJKoA9mBshI3OitKw83rModfIgSg2U/C211ceRb5\nN/66ysLMt9JSWRP71GrfDP+aJTB/TFrKRRvv96uF5mhlgMQ/53/VZWDnSu8X\nGlwqd3MMzIROBNfBYErGEloIxgr2IvuW6xZyJIJmqxwzap8c0V1+k506E2kP\nE4/NICT7nKa66FAzb61b2UWVJ0lutLaMuMNK8dzSa7dQvIxy3FRGgl9Tr2HC\nje7sSvZZWcm7zJf7yYj9TidcwOvKQXx1eJFCesocyVyGHDMOOhX3zcoVIfHa\nqUUAD8eXrL1P42D/wdwu6kQWEflOVBnuCNK/+1iv8pg2GvukyEeFP06WoDE/\nCR9/nr3PRNNwiPo+CaBlXxcbDhFR4pCzNGD4fkiktlM355e9TOd/KS7zqWY6\n+ScB\r\n=j4H/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDdlZnhZnIGrBzwv8VAG+iuFOUpkXqD5OPqf34Jb6aHqgIgLHKJd2FBwXG2xHUA2rvEKH6HozrV98LAhNQZYQCZxuU="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast_0.8.0_1557867117052_0.5451604690902605"},"_hasShrinkwrap":false},"0.0.0-88d3d38":{"name":"sast","version":"0.0.0-88d3d38","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.13.1","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^1.4.1"},"readme":"# sast\nThis is a thing that parses CSS, Sass, and SCSS into a [unist]-compatible\nabstract syntax tree (AST), which makes it possible to then search and\nmanipulate with all of the wonderful [unist utility modules][utilities]. Most\nof the heavy lifting is done by [gonzales].\n\n## Installation\nInstall it with npm:\n\n```\nnpm install --save sast\n```\n\n## Usage\nYou can `import` or `require()` the module and access [the API](#api) as its\nmethods, like this:\n\n```js\n// CommonJS, older versions of Node\nconst sast = require('sast')\n\n// ES6/ES2016/Babel/etc.\nimport sast from 'sast'\n\nconst tree = sast.parse('a { color: $red; }', {syntax: 'scss'})\nconsole.dir(tree, {depth: null})\n```\n\nor you can import just the API methods you need, like so:\n\n```js\n// CommonJS\nconst {parse} = require('sast')\n// ES6\nimport {parse} from 'sast'\n\nconst tree = parse('a { color: $red; }', {syntax: 'scss'})\n```\n\n## API\n\n### `sast.parse(source [, options])` <a name=\"parse\"></a>\nSynchronously parse the CSS, Sass, or SCSS source text (a string) into an\nabstract source tree (AST). The default syntax is CSS (`{syntax: 'css'}`);\nother acceptable values are `sass`, `scss`, and `less`. See the [gonzales\ndocs](https://github.com/tonyganch/gonzales-pe#parameters-1) for more info. To\nparse files by path, use [`parseFile()`](#parse-file).\n\n### `sast.stringify(node)` <a name=\"stringify\"></a>\nFormat the resulting AST back into a string, presumably after manipulating it.\n\n### `sast.jsonify(node)` <a name=\"jsonify\"></a>\nCoerce the given AST node into JSON data, according to the following rules:\n\n1. Numbers are numbers: `1` -> `1`, not `\"1\"`.\n1. Lists become arrays: `(a, 1)` -> `[\"a\", 1]`\n1. [Maps][Sass maps] become objects: `(x: 1)` -> `{x: 1}`\n1. Lists and maps can be nested!\n1. Everything else is [stringified](#stringify), and _should_ be preserved in\n   its original form:\n   * Sass/SCSS variables should preserve their leading `$`.\n   * Hex colors should preserve their leading `#`.\n   * `rgb()`, `rgba()`, `hsl()`, `hsla()`, and any other functions should\n     preserve their parentheses.\n   * Parentheses that are not parsed as lists or maps should be preserved.\n\n### `sast.parseFile(filename [, parseOptions={} [, readOptions='utf8'])` <a name=\"parse-file\"></a>\nRead a file and parse its contents, returning a Promise. If no\n`parseOptions.syntax` is provided, or its value is `auto`, the filename's\nextension will be used as the `syntax` option passed to [`parse()`](#parse).\n\n```js\nconst {parseFile} = require('sast')\nparseFile('path/to/some.scss')\n  .then(tree => console.dir(tree, {depth: null}))\n  .catch(error => console.error('Parse error:', error))\n```\n\n## CLI\nThe `sast` [npm package] comes with two command line utilities:\n\n### `sast-parse`\nParses a file or stdin as a given syntax, applies one or more simplifying\ntransformations, then outputs the resulting syntax tree in a variety of\nformats:\n\n* JSON: the raw syntax tree in object form, which can be passed to other CLIs.\n* [YAML]: an easier-to-read alternative to JSON, also suitable for piping to\n  other CLIs.\n* Tree: a text representation of the syntax tree provided by\n  [unist-util-inspect](https://github.com/syntax-tree/unist-util-inspect).\n* Text: the [stringified](#stringify) syntax tree, which is hopefully valid for\n  the given syntax.\n\nRun `sast-parse --help` for available options.\n\n### `sast-data`\nParses one or more SCSS (the only supported syntax at this time) files, and\ntransforms all top-level variable declarations into key-value pairs. The result\nis a JSON object in which each key is a variable name, and the value is the\n[jsonified](#jsonify) variable value.\n\nThis is useful for generating [design tokens] from existing SCSS variables if\nyou don't have the ability to go in the other direction.\n\nRun `sast-data --help` for available options and more information.\n\n## Node types\nMost [node types] are defined by [gonzalez], the underlying parser. After\ntransforming each of the syntax tree nodes into [unist nodes], the following\nnodes are introduced:\n\n### Maps\nAny `parentheses` node whose first `operator` child is a `:` is interpreted as\na [Sass map] and recast as a `map` node. The `children` are preserved as-is,\nand key/value pairs separated by `:` and delimited by `,` are placed in the\n`values` property as an array of objects with `key` and `value` properties,\neach of which is a plain old node list. Some examples:\n\n* `(x: 1)` will be [jsonified](#jsonify) as `{x: 1}`\n* `(x: a, y: 2)` will be interpreted as `{x: \"a\", y: 2}`\n\n### Lists\nAny `parentheses` node whose first `operator` child is a `,` is interpreted as\na list (array) and recast as a `list` node. The `children` are perserved as-is,\nand children that aren't `space` nodes are split into subgroups by each `,`\noperator and converted into `value` nodes with one or more children, then\nplaced in the `values` property of the `list` node. Some examples:\n\n* `(1, x)` will be [jsonified](#jsonify) as `[1, \"x\"]`\n* `(a, (b, c))` will be intepreted as `[\"a\", [\"b\", \"c\"]]`\n\n\n[gonzales]: https://github.com/tonyganch/gonzales-pe\n[node types]: https://github.com/tonyganch/gonzales-pe/blob/dev/docs/node-types.md\n[sass map]: https://www.sitepoint.com/using-sass-maps/\n[unist]: https://github.com/syntax-tree/unist\n[unist nodes]: https://github.com/syntax-tree/unist#unist-nodes\n[utilities]: https://github.com/syntax-tree/unist#list-of-utilities\n[npm package]: https://npmjs.com/package/sast\n[YAML]: https://en.wikipedia.org/wiki/YAML\n","readmeFilename":"README.md","gitHead":"f8c45385f48e3a031ccd4d9fff9e3a3d634b001f","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.0.0-88d3d38","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"integrity":"sha512-Yo2mE/8yZGXrTTYp9xdeKUwMz5cZVUIozL+IPxbkHNZrVv3ch/0t/xOUOBawLKgG0ze38KJAFT/U5MzxhMdzYw==","shasum":"9f5c824cfea1254df8cb93c17f41f04f4e2baebd","tarball":"https://registry.npmjs.org/sast/-/sast-0.0.0-88d3d38.tgz","fileCount":21,"unpackedSize":28481,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc2yryCRA9TVsSAnZWagAA4mIP/3FPkuOFMu8t52q7/EOX\nxLq4Nnn0jQNjTZQ4NARTf8PgatzBFK4SFwm8ZwKO+VpqAEedIGxxTt9WaMpL\nc/18HlL6uBhHsJW1y/MJApIB747zT9zdADqTvoIF7K/JdJh4842Dp8C5CMPN\n6Qd/aYcTs/0VfnXxYfLnFf8IPymEDQnvvVcECxZHfB4sHdA7U6Iif+AbACbd\npogzalyr4hVAYhteNaOzU5cb1Jbfch8JqiiU2EyGiZ2E85tx0bre6H6A2Xdr\na3MtsUG4RhG+7IDz+CNtp9OLplrJ9KPph+tGJwNl34pBTi9b2BOltaSvs9ly\nql+v33aEAu8+HQRgEJFkk1EC01JuBGtPknLaDY4o/CVsCMwtyqG4ALPUFjBO\nZ/+tPfD26yZ0l7JyqJXwtV4PSzVzktShQJ+qPulfuiBWJlEmGD+YAvaKpILN\nceF7nE+kKkQRIHGekdwL4NBIvSVIxcBy9SZPSxCminRq263/AHzxQDX2D6as\n3nMkbUhozSVEdp7F8TmZjsUa6Mri4xu7evCAaTM7fCsO6l2PBskTuayIbEQU\nFA8nT1iRsp4vy63Ggj4hsQaqIpNku8Ry9ae/9TRm7C7gVI1XR0n9uWT5B9+T\nMmCdQRLoP53mCGeiWrjIyc3HKM+ujNcjCzOetSdp4z5cc22KiLQ42Z2y6QJi\n0HBE\r\n=POfV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDlhC45lzoCsdzkwf835BQ7XX+/fQPAxT/kC45rgKmBVQIgFZx6l+NkOfdiFfbZ4NIYRIpZcUB/DleA8nAUwGtGytw="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast_0.0.0-88d3d38_1557867250155_0.5918679244247622"},"_hasShrinkwrap":false},"0.0.0-e9403ac":{"name":"sast","version":"0.0.0-e9403ac","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.13.1","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^1.4.1"},"readme":"# sast\nThis is a thing that parses CSS, Sass, and SCSS into a [unist]-compatible\nabstract syntax tree (AST), which makes it possible to then search and\nmanipulate with all of the wonderful [unist utility modules][utilities]. Most\nof the heavy lifting is done by [gonzales].\n\n## Installation\nInstall it with npm:\n\n```\nnpm install --save sast\n```\n\n## Usage\nYou can `import` or `require()` the module and access [the API](#api) as its\nmethods, like this:\n\n```js\n// CommonJS, older versions of Node\nconst sast = require('sast')\n\n// ES6/ES2016/Babel/etc.\nimport sast from 'sast'\n\nconst tree = sast.parse('a { color: $red; }', {syntax: 'scss'})\nconsole.dir(tree, {depth: null})\n```\n\nor you can import just the API methods you need, like so:\n\n```js\n// CommonJS\nconst {parse} = require('sast')\n// ES6\nimport {parse} from 'sast'\n\nconst tree = parse('a { color: $red; }', {syntax: 'scss'})\n```\n\n## API\n\n### `sast.parse(source [, options])` <a name=\"parse\"></a>\nSynchronously parse the CSS, Sass, or SCSS source text (a string) into an\nabstract source tree (AST). The default syntax is CSS (`{syntax: 'css'}`);\nother acceptable values are `sass`, `scss`, and `less`. See the [gonzales\ndocs](https://github.com/tonyganch/gonzales-pe#parameters-1) for more info. To\nparse files by path, use [`parseFile()`](#parse-file).\n\n### `sast.stringify(node)` <a name=\"stringify\"></a>\nFormat the resulting AST back into a string, presumably after manipulating it.\n\n### `sast.jsonify(node)` <a name=\"jsonify\"></a>\nCoerce the given AST node into JSON data, according to the following rules:\n\n1. Numbers are numbers: `1` -> `1`, not `\"1\"`.\n1. Lists become arrays: `(a, 1)` -> `[\"a\", 1]`\n1. [Maps][Sass maps] become objects: `(x: 1)` -> `{x: 1}`\n1. Lists and maps can be nested!\n1. Everything else is [stringified](#stringify), and _should_ be preserved in\n   its original form:\n   * Sass/SCSS variables should preserve their leading `$`.\n   * Hex colors should preserve their leading `#`.\n   * `rgb()`, `rgba()`, `hsl()`, `hsla()`, and any other functions should\n     preserve their parentheses.\n   * Parentheses that are not parsed as lists or maps should be preserved.\n\n### `sast.parseFile(filename [, parseOptions={} [, readOptions='utf8'])` <a name=\"parse-file\"></a>\nRead a file and parse its contents, returning a Promise. If no\n`parseOptions.syntax` is provided, or its value is `auto`, the filename's\nextension will be used as the `syntax` option passed to [`parse()`](#parse).\n\n```js\nconst {parseFile} = require('sast')\nparseFile('path/to/some.scss')\n  .then(tree => console.dir(tree, {depth: null}))\n  .catch(error => console.error('Parse error:', error))\n```\n\n## CLI\nThe `sast` [npm package] comes with two command line utilities:\n\n### `sast-parse`\nParses a file or stdin as a given syntax, applies one or more simplifying\ntransformations, then outputs the resulting syntax tree in a variety of\nformats:\n\n* JSON: the raw syntax tree in object form, which can be passed to other CLIs.\n* [YAML]: an easier-to-read alternative to JSON, also suitable for piping to\n  other CLIs.\n* Tree: a text representation of the syntax tree provided by\n  [unist-util-inspect](https://github.com/syntax-tree/unist-util-inspect).\n* Text: the [stringified](#stringify) syntax tree, which is hopefully valid for\n  the given syntax.\n\nRun `sast-parse --help` for available options.\n\n### `sast-data`\nParses one or more SCSS (the only supported syntax at this time) files, and\ntransforms all top-level variable declarations into key-value pairs. The result\nis a JSON object in which each key is a variable name, and the value is the\n[jsonified](#jsonify) variable value.\n\nThis is useful for generating [design tokens] from existing SCSS variables if\nyou don't have the ability to go in the other direction.\n\nRun `sast-data --help` for available options and more information.\n\n## Node types\nMost [node types] are defined by [gonzalez], the underlying parser. After\ntransforming each of the syntax tree nodes into [unist nodes], the following\nnodes are introduced:\n\n### Maps\nAny `parentheses` node whose first `operator` child is a `:` is interpreted as\na [Sass map] and recast as a `map` node. The `children` are preserved as-is,\nand key/value pairs separated by `:` and delimited by `,` are placed in the\n`values` property as an array of objects with `key` and `value` properties,\neach of which is a plain old node list. Some examples:\n\n* `(x: 1)` will be [jsonified](#jsonify) as `{x: 1}`\n* `(x: a, y: 2)` will be interpreted as `{x: \"a\", y: 2}`\n\n### Lists\nAny `parentheses` node whose first `operator` child is a `,` is interpreted as\na list (array) and recast as a `list` node. The `children` are perserved as-is,\nand children that aren't `space` nodes are split into subgroups by each `,`\noperator and converted into `value` nodes with one or more children, then\nplaced in the `values` property of the `list` node. Some examples:\n\n* `(1, x)` will be [jsonified](#jsonify) as `[1, \"x\"]`\n* `(a, (b, c))` will be intepreted as `[\"a\", [\"b\", \"c\"]]`\n\n\n[gonzales]: https://github.com/tonyganch/gonzales-pe\n[node types]: https://github.com/tonyganch/gonzales-pe/blob/dev/docs/node-types.md\n[sass map]: https://www.sitepoint.com/using-sass-maps/\n[unist]: https://github.com/syntax-tree/unist\n[unist nodes]: https://github.com/syntax-tree/unist#unist-nodes\n[utilities]: https://github.com/syntax-tree/unist#list-of-utilities\n[npm package]: https://npmjs.com/package/sast\n[YAML]: https://en.wikipedia.org/wiki/YAML\n","readmeFilename":"README.md","gitHead":"96cf1a194700d2e7ea3a302cdab236184a93dee2","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.0.0-e9403ac","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"integrity":"sha512-uuVipfecRndSSgLrz0bXFovJ+W7T42tyKk61k5dYeyf6xvKCK3NldyXEuy1BdDUtX46dvIpdv49MFT9w+hXnVA==","shasum":"03c3d7e4b6b6740abfae67efd3fa481ff2f04e6e","tarball":"https://registry.npmjs.org/sast/-/sast-0.0.0-e9403ac.tgz","fileCount":21,"unpackedSize":28481,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc2ysGCRA9TVsSAnZWagAA1GkQAJf3RtvWAYjE9AxmElvE\nvr2KNYrxHGKsQT6qif9EHGsHAYt2oL+8vEscKYexqDxVICVJyUqaYDePRFjE\nt4IV2Dby0lKeOHlV+wLTp5dfNDsXAxq+57DFx5tVyhi51gX6WbTlzT6wCqgy\nS2LMZ1kF5+X7bMcD2vSadqM5Qo5YrFYrAAZTXQr6C0kCNWfuop75pfem3jQo\nhLUoYjX05raa5mho+1GcFb6OmDHtW2tEBCpU2WOw2X3J63CTv/z05oD/DVV1\nwvHasEKqioDg4e5mcNcVcXLNvTQzARaJxdIGDf7XK8n4BfTE+Z/I67qWhA2P\nP6M1UK5bDUhWJrOizo3MK2kv9yYlaQ+IgyRuNXwATqN7+HxwMDe4vEIg22qn\nKBBmuBbBTK7SSHktEkmTHcdIdaV6azLlUVLkLNWlClQyd+cEkESN/Bm195Gb\npX/MtoVqRfo5OUBUeptKJ1CGwFmbdot1NtZYEXpGooopbhi4OvbgONPxvtpv\nI4fhVsVig1vLhih0BS7KN66XC56Hk7hy5cvmwfS3QYg8mSavUvWYmS38i+RJ\nnOSXcSRSpa9AzQM2SYUoGfLcCa3pzuHUeZPqdDMDSiAaRUPPkWbnCftoVM+z\nAok+GP/AyTG2YW4jx4eWfOQTcXSbY7iD0Fa2w7+oJAL/pjmZDivEbP593EXC\nsstB\r\n=GJ9f\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHQsOWhzAfbWmYs2tRrhTrHCQ95ipk2XqbMoymXhEuGnAiAJQ4SYvan4S1p+EL5XUtw1RrtbntGe85uwrguJK6jqmg=="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast_0.0.0-e9403ac_1557867269619_0.30928982851342424"},"_hasShrinkwrap":false},"0.8.1":{"name":"sast","version":"0.8.1","description":"Parse CSS, Sass, and SCSS into Unist syntax trees","main":"index.js","bin":{"sast-parse":"bin/sast-parse","sast-data":"bin/sast-data"},"scripts":{"test":"ava --verbose test/*.js"},"keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"license":"Unlicense","dependencies":{"fs-extra":"^4.0.2","gonzales-pe":"^4.2.2","invariant":"^2.2.2","js-yaml":"^3.13.1","minimatch":"^3.0.4","unist-util-find":"^1.0.1","unist-util-inspect":"^4.1.1","unist-util-is":"^2.1.1","unist-util-map":"^1.0.3","unist-util-remove":"^1.0.0","unist-util-remove-position":"^1.1.1","unist-util-select":"^1.5.0","unist-util-visit":"^1.1.3","unist-util-visit-parents":"^1.1.1","yargs":"^9.0.1"},"devDependencies":{"ava":"^1.4.1"},"gitHead":"1facd0c58ca634ed21cc3bded2bacb4057d73936","bugs":{"url":"https://github.com/shawnbot/sast/issues"},"homepage":"https://github.com/shawnbot/sast#readme","_id":"sast@0.8.1","_npmVersion":"6.4.1","_nodeVersion":"10.15.3","_npmUser":{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"},"dist":{"integrity":"sha512-BJVgVcUgO4/6Rs8YmqWO0T873swrGZDRwL0rU22XMGt+hgkdxZN6rtn00gwiDnJARqEyOJmUroXCfrYPHuYLZA==","shasum":"3f6c765e75aaa6c630b4d9297e56c90a294a44e2","tarball":"https://registry.npmjs.org/sast/-/sast-0.8.1.tgz","fileCount":21,"unpackedSize":28473,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc2ytlCRA9TVsSAnZWagAAyQkP/2knbl5+agnrlsgSuRRI\n9sPa1nKR5DjYnU+YC3PRLykLIB4BeB6FqAFEDnbdXZDY4DwvUSYae0sxZudp\nFJ8nV+lxIrIR9Wt1mVq7Vi8dQzRDlnjID6dP0KR5UevgNIUBQjq0CPJ5OUiA\nX6gmRwR1y3o9uPPHh+k7BQW4VGfXtrb5oc1NzU7WU6s4CH/eTFzFeVR746fA\njT75hfbjOVKuNpcFZ+Vuls0gC/vUKPTHesIVS02To26Gl091hY1rRAmA9mrR\nGengnvs1lsoNK4N7Jal+eqre2UdHcrdi+wYDiuZT4x2VoKkBOJPISfzE24MM\nQMwHlA6NwTosPFofins7H7to1Ha3ChN6hGVpghMarQ5Ps8uDE/EB9PeA+oeQ\n2U22XA1Z6X34+wqnGJSpOqrvBQZ87g0H7PSxUUXg+OQDNlXjIX/bhma2etcK\nLibfHZt3pUD6TKHYt7eo5+W1Ls3HCQPLm/Kr0FlD16F6p6dI14Qq2Us8unfh\nR8LSnlKU/4e5mLcwXSc5g0eE2lp0zmx46M9G8360yP2pvXmju1Mw5/lu5UeL\nusMqiXPUIpBeOIFkTmQzzDRvJh/KT5rZfi0lU1JSF+XcU9dLFKCsPVsXmVzy\nyPIm1EWioG1Uq0ndTfRu0ZBfcG/+JWdnpolYO4LHt1qT8P7gAODomxwHk5Ga\nxoy3\r\n=xYAf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHNY2j0gAaXRMzxMbtTBjMAp0XKAlHt4+56iYkGlxkgaAiBgrQ1D75V6zwWj5isamvqYWuPB7jvN6CczFAlEL25rIg=="}]},"maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sast_0.8.1_1557867364667_0.04446206365383909"},"_hasShrinkwrap":false}},"readme":"# sast\nThis is a thing that parses CSS, Sass, and SCSS into a [unist]-compatible\nabstract syntax tree (AST), which makes it possible to then search and\nmanipulate with all of the wonderful [unist utility modules][utilities]. Most\nof the heavy lifting is done by [gonzales].\n\n## Installation\nInstall it with npm:\n\n```\nnpm install --save sast\n```\n\n## Usage\nYou can `import` or `require()` the module and access [the API](#api) as its\nmethods, like this:\n\n```js\n// CommonJS, older versions of Node\nconst sast = require('sast')\n\n// ES6/ES2016/Babel/etc.\nimport sast from 'sast'\n\nconst tree = sast.parse('a { color: $red; }', {syntax: 'scss'})\nconsole.dir(tree, {depth: null})\n```\n\nor you can import just the API methods you need, like so:\n\n```js\n// CommonJS\nconst {parse} = require('sast')\n// ES6\nimport {parse} from 'sast'\n\nconst tree = parse('a { color: $red; }', {syntax: 'scss'})\n```\n\n## API\n\n### `sast.parse(source [, options])` <a name=\"parse\"></a>\nSynchronously parse the CSS, Sass, or SCSS source text (a string) into an\nabstract source tree (AST). The default syntax is CSS (`{syntax: 'css'}`);\nother acceptable values are `sass`, `scss`, and `less`. See the [gonzales\ndocs](https://github.com/tonyganch/gonzales-pe#parameters-1) for more info. To\nparse files by path, use [`parseFile()`](#parse-file).\n\n### `sast.stringify(node)` <a name=\"stringify\"></a>\nFormat the resulting AST back into a string, presumably after manipulating it.\n\n### `sast.jsonify(node)` <a name=\"jsonify\"></a>\nCoerce the given AST node into JSON data, according to the following rules:\n\n1. Numbers are numbers: `1` -> `1`, not `\"1\"`.\n1. Lists become arrays: `(a, 1)` -> `[\"a\", 1]`\n1. [Maps][Sass maps] become objects: `(x: 1)` -> `{x: 1}`\n1. Lists and maps can be nested!\n1. Everything else is [stringified](#stringify), and _should_ be preserved in\n   its original form:\n   * Sass/SCSS variables should preserve their leading `$`.\n   * Hex colors should preserve their leading `#`.\n   * `rgb()`, `rgba()`, `hsl()`, `hsla()`, and any other functions should\n     preserve their parentheses.\n   * Parentheses that are not parsed as lists or maps should be preserved.\n\n### `sast.parseFile(filename [, parseOptions={} [, readOptions='utf8'])` <a name=\"parse-file\"></a>\nRead a file and parse its contents, returning a Promise. If no\n`parseOptions.syntax` is provided, or its value is `auto`, the filename's\nextension will be used as the `syntax` option passed to [`parse()`](#parse).\n\n```js\nconst {parseFile} = require('sast')\nparseFile('path/to/some.scss')\n  .then(tree => console.dir(tree, {depth: null}))\n  .catch(error => console.error('Parse error:', error))\n```\n\n## CLI\nThe `sast` [npm package] comes with two command line utilities:\n\n### `sast-parse`\nParses a file or stdin as a given syntax, applies one or more simplifying\ntransformations, then outputs the resulting syntax tree in a variety of\nformats:\n\n* JSON: the raw syntax tree in object form, which can be passed to other CLIs.\n* [YAML]: an easier-to-read alternative to JSON, also suitable for piping to\n  other CLIs.\n* Tree: a text representation of the syntax tree provided by\n  [unist-util-inspect](https://github.com/syntax-tree/unist-util-inspect).\n* Text: the [stringified](#stringify) syntax tree, which is hopefully valid for\n  the given syntax.\n\nRun `sast-parse --help` for available options.\n\n### `sast-data`\nParses one or more SCSS (the only supported syntax at this time) files, and\ntransforms all top-level variable declarations into key-value pairs. The result\nis a JSON object in which each key is a variable name, and the value is the\n[jsonified](#jsonify) variable value.\n\nThis is useful for generating [design tokens] from existing SCSS variables if\nyou don't have the ability to go in the other direction.\n\nRun `sast-data --help` for available options and more information.\n\n## Node types\nMost [node types] are defined by [gonzalez], the underlying parser. After\ntransforming each of the syntax tree nodes into [unist nodes], the following\nnodes are introduced:\n\n### Maps\nAny `parentheses` node whose first `operator` child is a `:` is interpreted as\na [Sass map] and recast as a `map` node. The `children` are preserved as-is,\nand key/value pairs separated by `:` and delimited by `,` are placed in the\n`values` property as an array of objects with `key` and `value` properties,\neach of which is a plain old node list. Some examples:\n\n* `(x: 1)` will be [jsonified](#jsonify) as `{x: 1}`\n* `(x: a, y: 2)` will be interpreted as `{x: \"a\", y: 2}`\n\n### Lists\nAny `parentheses` node whose first `operator` child is a `,` is interpreted as\na list (array) and recast as a `list` node. The `children` are perserved as-is,\nand children that aren't `space` nodes are split into subgroups by each `,`\noperator and converted into `value` nodes with one or more children, then\nplaced in the `values` property of the `list` node. Some examples:\n\n* `(1, x)` will be [jsonified](#jsonify) as `[1, \"x\"]`\n* `(a, (b, c))` will be intepreted as `[\"a\", [\"b\", \"c\"]]`\n\n\n[gonzales]: https://github.com/tonyganch/gonzales-pe\n[node types]: https://github.com/tonyganch/gonzales-pe/blob/dev/docs/node-types.md\n[sass map]: https://www.sitepoint.com/using-sass-maps/\n[unist]: https://github.com/syntax-tree/unist\n[unist nodes]: https://github.com/syntax-tree/unist#unist-nodes\n[utilities]: https://github.com/syntax-tree/unist#list-of-utilities\n[npm package]: https://npmjs.com/package/sast\n[YAML]: https://en.wikipedia.org/wiki/YAML\n","maintainers":[{"name":"shawnbot","email":"shawnbot-npm@nym.hush.com"}],"time":{"modified":"2022-06-26T16:09:13.897Z","created":"2017-10-18T18:38:35.431Z","0.0.1":"2017-10-18T18:38:35.431Z","0.1.0":"2017-10-18T20:19:56.554Z","0.1.1":"2017-10-18T20:27:02.742Z","0.1.2":"2017-10-18T20:28:55.252Z","0.2.0":"2017-10-19T08:39:32.367Z","0.3.0":"2017-10-19T17:20:52.093Z","0.4.0":"2017-10-19T21:04:08.755Z","0.5.0":"2017-10-19T21:13:14.999Z","0.6.0":"2018-05-15T20:49:06.441Z","0.7.0":"2018-05-15T21:42:42.795Z","0.8.0-rc.69c1208":"2019-05-14T20:18:25.805Z","0.8.0-rc.3a67128":"2019-05-14T20:19:12.820Z","0.8.0":"2019-05-14T20:51:57.225Z","0.0.0-88d3d38":"2019-05-14T20:54:10.249Z","0.0.0-e9403ac":"2019-05-14T20:54:29.754Z","0.8.1":"2019-05-14T20:56:05.252Z"},"homepage":"https://github.com/shawnbot/sast#readme","keywords":["css","sass","sast","scss","syntax-tree","unist"],"repository":{"type":"git","url":"git+https://github.com/shawnbot/sast.git"},"author":{"name":"Shawn Allen","email":"shawn.allen@github.com"},"bugs":{"url":"https://github.com/shawnbot/sast/issues"},"license":"Unlicense","readmeFilename":"README.md"}